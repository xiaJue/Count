package com.xiajue.count.count.database.utils;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.xiajue.count.count.bean.CountDataBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "COUNT_DATA_BEAN".
*/
public class CountDataBeanDao extends AbstractDao<CountDataBean, Long> {

    public static final String TABLENAME = "COUNT_DATA_BEAN";

    /**
     * Properties of entity CountDataBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Type = new Property(0, int.class, "type", false, "TYPE");
        public final static Property Model = new Property(1, int.class, "model", false, "MODEL");
        public final static Property Numbers_from = new Property(2, int.class, "numbers_from", false, "NUMBERS_FROM");
        public final static Property Numbers_to = new Property(3, int.class, "numbers_to", false, "NUMBERS_TO");
        public final static Property CountNumber = new Property(4, int.class, "countNumber", false, "COUNT_NUMBER");
        public final static Property UseTime = new Property(5, int.class, "useTime", false, "USE_TIME");
        public final static Property UnCountTimeMax = new Property(6, int.class, "unCountTimeMax", false, "UN_COUNT_TIME_MAX");
        public final static Property Fraction = new Property(7, int.class, "fraction", false, "FRACTION");
        public final static Property CountListJson = new Property(8, String.class, "countListJson", false, "COUNT_LIST_JSON");
        public final static Property LastTime = new Property(9, long.class, "lastTime", true, "_id");
    }


    public CountDataBeanDao(DaoConfig config) {
        super(config);
    }
    
    public CountDataBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"COUNT_DATA_BEAN\" (" + //
                "\"TYPE\" INTEGER NOT NULL ," + // 0: type
                "\"MODEL\" INTEGER NOT NULL ," + // 1: model
                "\"NUMBERS_FROM\" INTEGER NOT NULL ," + // 2: numbers_from
                "\"NUMBERS_TO\" INTEGER NOT NULL ," + // 3: numbers_to
                "\"COUNT_NUMBER\" INTEGER NOT NULL ," + // 4: countNumber
                "\"USE_TIME\" INTEGER NOT NULL ," + // 5: useTime
                "\"UN_COUNT_TIME_MAX\" INTEGER NOT NULL ," + // 6: unCountTimeMax
                "\"FRACTION\" INTEGER NOT NULL ," + // 7: fraction
                "\"COUNT_LIST_JSON\" TEXT," + // 8: countListJson
                "\"_id\" INTEGER PRIMARY KEY NOT NULL UNIQUE );"); // 9: lastTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COUNT_DATA_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CountDataBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getType());
        stmt.bindLong(2, entity.getModel());
        stmt.bindLong(3, entity.getNumbers_from());
        stmt.bindLong(4, entity.getNumbers_to());
        stmt.bindLong(5, entity.getCountNumber());
        stmt.bindLong(6, entity.getUseTime());
        stmt.bindLong(7, entity.getUnCountTimeMax());
        stmt.bindLong(8, entity.getFraction());
 
        String countListJson = entity.getCountListJson();
        if (countListJson != null) {
            stmt.bindString(9, countListJson);
        }
        stmt.bindLong(10, entity.getLastTime());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CountDataBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getType());
        stmt.bindLong(2, entity.getModel());
        stmt.bindLong(3, entity.getNumbers_from());
        stmt.bindLong(4, entity.getNumbers_to());
        stmt.bindLong(5, entity.getCountNumber());
        stmt.bindLong(6, entity.getUseTime());
        stmt.bindLong(7, entity.getUnCountTimeMax());
        stmt.bindLong(8, entity.getFraction());
 
        String countListJson = entity.getCountListJson();
        if (countListJson != null) {
            stmt.bindString(9, countListJson);
        }
        stmt.bindLong(10, entity.getLastTime());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 9);
    }    

    @Override
    public CountDataBean readEntity(Cursor cursor, int offset) {
        CountDataBean entity = new CountDataBean( //
            cursor.getInt(offset + 0), // type
            cursor.getInt(offset + 1), // model
            cursor.getInt(offset + 2), // numbers_from
            cursor.getInt(offset + 3), // numbers_to
            cursor.getInt(offset + 4), // countNumber
            cursor.getInt(offset + 5), // useTime
            cursor.getInt(offset + 6), // unCountTimeMax
            cursor.getInt(offset + 7), // fraction
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // countListJson
            cursor.getLong(offset + 9) // lastTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CountDataBean entity, int offset) {
        entity.setType(cursor.getInt(offset + 0));
        entity.setModel(cursor.getInt(offset + 1));
        entity.setNumbers_from(cursor.getInt(offset + 2));
        entity.setNumbers_to(cursor.getInt(offset + 3));
        entity.setCountNumber(cursor.getInt(offset + 4));
        entity.setUseTime(cursor.getInt(offset + 5));
        entity.setUnCountTimeMax(cursor.getInt(offset + 6));
        entity.setFraction(cursor.getInt(offset + 7));
        entity.setCountListJson(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setLastTime(cursor.getLong(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CountDataBean entity, long rowId) {
        entity.setLastTime(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CountDataBean entity) {
        if(entity != null) {
            return entity.getLastTime();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CountDataBean entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
